#!/usr/bin/python

import os
import sys
from os.path import abspath, curdir
from urllib import urlopen
from os.path import exists
from json import loads

try:
    from catacombs import db
    from catacombs import urls
except ImportError:
    sys.path.append("..")
    from catacombs import db
    from catacombs import urls

def run():
    if os.environ.get("REQUEST_METHOD", ""):
        from wsgiref.handlers import BaseCGIHandler
        BaseCGIHandler(sys.stdin, sys.stdout, sys.stderr, os.environ).run(urls.urls)
    else:
        from wsgiref.simple_server import WSGIServer, WSGIRequestHandler
        httpd = WSGIServer(('', 4242), WSGIRequestHandler)
        httpd.set_app(urls.urls)
        print "Serving HTTP on %s port %s ..." % httpd.socket.getsockname()
        httpd.serve_forever()

def help():
    print "Available commands:"
    print "  run        - launch the server"
    print "  add        - add a list of ebooks to the db"
    print "  add-peers  - add a list of ebooks to the db"
    print "  help       - print this and exist"
    print

def add_book(*books):
    if not books:
        print "give me at least one ebook name"
        sys.exit(1)
    for book in books:
        book_path = abspath(curdir) + "/" + book
        if not exists(book_path):
            print "Error: '%s' doesn't not exists" % book_path
            return
        db.add_a_book(book_path, book)

def add_peers(*peers):
    if not peers:
        print "give me at least one url to a peers"
        sys.exit(1)
    for peer in peers:
        try:
            name = loads(urlopen(peer + "/about").read())["owner"]
        except IOError:
            print "error, can't connect to %s" % peer
        else:
            db.add_a_peer(peer, name)

if __name__ == "__main__":
    if len(sys.argv) == 1:
        help()
        sys.exit(0)
    if sys.argv[1] == "run":
        try:
            run()
        except KeyboardInterrupt:
            print "end"
    elif sys.argv[1] == "help":
        help()
    elif sys.argv[1] == "add":
        add_book(*sys.argv[2:])
    elif sys.argv[1] == "add-peers":
        add_peers(*sys.argv[2:])
    else:
        print "Error: invalid command '%s'" % sys.argv[1]
        print
        help()
        sys.exit(1)
